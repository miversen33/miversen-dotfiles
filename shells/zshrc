#!/bin/zsh
unalias ls 2>/dev/null
if [ ! -z ${PREVIOUS_PATH+x} ]; then
  # Resetting the PATH variable to whatever it was before we manipulated it below
  PATH=$PREVIOUS_PATH
fi
export PREVIOUS_PATH=${PREVIOUS_PATH-${PATH}}

function whatsmyip(){
  dig @resolver4.opendns.com myip.opendns.com +short
}

function install(){
  if [ ! -d $HOME/.oh-my-zsh ]; then
    echo "Installing oh my zsh"
    sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
  fi
  if [ ! -f $HOME/.p10k.zsh ]; then
    curl -fsSL -o $HOME/.p10k.zsh https://raw.githubusercontent.com/miversen33/miversen-dotfiles/master/shells/p10k.zsh
  fi
  if [ ! -d ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting ]; then
    git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting
  fi
  if [ ! -d ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions ]; then
    git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions
  fi
  if [ ! -d ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k ]; then
    git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k
  fi
  # Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
  # Initialization code that may require console input (password prompts, [y/n]
  # confirmations, etc.) must go above this block; everything else may go below.
  if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
    source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
  fi
}

EDITOR="vim"

# If you come from bash you might have to change your $PATH.
# PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="powerlevel10k/powerlevel10k"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment one of the following lines to change the auto-update behavior
# zstyle ':omz:update' mode disabled  # disable automatic updates
# zstyle ':omz:update' mode auto      # update automatically without asking
zstyle ':omz:update' mode reminder  # just remind me to update when it's time

# Uncomment the following line to change how often to auto-update (in days).
# zstyle ':omz:update' frequency 13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# ZSH_THEME="robbyrussell"
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# You can also set it to another string to have that shown instead of the default red dots.
# e.g. COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"
# Caution: this setting can cause issues with multiline prompts in zsh < 5.7.1 (see #5765)
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(
  git
  svn
  # branch
  # podman
  docker
  docker-compose
  redis-cli
  fzf
  zsh-syntax-highlighting
  zsh-autosuggestions
  dotenv
  rust
  pipenv
  nodenv
  virtualenv
  poetry-env
  pyenv
  # nvm
)

# User configuration

export BAT_THEME="OneHalfDark"

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

## User added junk
RC_PATH=$(readlink -f "${(%):-%x}")
export SHELL_RC="${RC_PATH}"
RC_DIR=$(dirname $(readlink -f $RC_PATH))
AUTO_DIR="${RC_DIR}/auto"
SCREENDIR=$HOME/.cache/screen

autoload -Uz compinit && compinit
if [ -d "${AUTO_DIR}" ]; then
  for auto in $(ls $AUTO_DIR/*.zsh); do
    . "${auto}"
  done
fi

function setup_base(){
  [ -f /etc/profile ] && source /etc/profile
  [ ! -d $SCREENDIR ] && mkdir -p $SCREENDIR
  [ -d "${HOME}/.luarocks" ] && PATH="${PATH}:${HOME}/.luarocks/bin"
  [ -d "${HOME}/.local/programs/neovim/current" ] && PATH="${HOME}/.local/programs/neovim/current/bin:$PATH"
  [ -d "${HOME}/.local/bin" ] && PATH="${HOME}/.local/bin:$PATH"
  [ -d "${HOME}/.cargo/bin" ] && PATH="${HOME}/.cargo/bin:$PATH"

  if [ -d /snap/ ]; then
    for dir in /snap/*; do
      [ -d "${dir}" ] && PATH="${dir}:$PATH"
      [ -d "${dir}/current" ] && PATH="${dir}/current:$PATH"
    done
  fi
  if [ -d /opt ]; then
    for dir in /opt/*; do
      [ -d "${dir}/bin" ] && PATH="$PATH:${dir}/bin"
      [ -d "${dir}/current/bin" ] && PATH="$PATH:${dir}/current/bin"
    done
  fi

  unalias vim 2>/dev/null
  [ $HOME/.vimrc ] && VIMRC=$HOME/.vimrc || VIMRC=/etc/vimrc
  if [ $(command -v nvim) ]; then
    EDITOR="nvim"
    alias vim="nvim"
    [ -f $HOME/.config/nvim/init.lua ] && VIMRC=$HOME/.config/nvim/init.lua
  fi
}

##### Handling if we are in a container and don't have certain things
[ ! -z ${USER+x} ] && export USER=$(whoami)
if [ -x "$(command -v tmux)" ] &&
   [ ! -z ${NOTMUX+x} ] &&
   [ ! -z ${MYVIMRC+x} ] &&
   [ ! -z ${TMUX+x} ] &&
   [ "${TERM_PROGRAM}" != "vscode" ] &&
   [ ! -f $HOME/.notmux ] &&
   [[ ! -z ${SSH_CLIENT+x} || -f $HOME/.isproxy ]]; then
      tmux -2 a -t default || tmux -2 new -s default;
      exit 0
  fi

##### Adding nvm handling
export NVM_DIR="${HOME}/.nvm"
function lazy_handle_node(){
  # This nastiness is thanks to https://github.com/nvm-sh/nvm/issues/1277#issuecomment-1165225621
  # Really cool bogdanu, thanks for making node less shitty
  function init_nvm(){
    nvm_dir="${NVM_DIR}"
    [ ! -d $nvm_dir ] && [ -d /usr/share/nvm ] && nvm_dir=/usr/share/nvm
    [ -f "${nvm_dir}/nvm.sh" ] && source "${nvm_dir}/nvm.sh"
    [ -f "${nvm_dir}/bash_completion" ] && source "${nvm_dir}/bash_completion"
    [ -f "${nvm_dir}/install-nvm-exec" ] && source "${nvm_dir}/install-nvm-exec"
  }
  lazy_aliases=(node npm npx yarn corepack)
  for a in "${lazy_aliases[@]}"; do
    alias "${a}"="command -v node || { init-nvm && unalias $*; } && $a \"\$@\""
  done
  if [ -f /usr/share/nvm/init-nvm.sh ]; then
    source /usr/share/nvm/init-nvm.sh
  fi
}
##### Fzf goodies
function setup_fzf(){
  if [ ! $(command -v fzf) ]; then
    [ ! -f $HOME/.cache/miversen_zsh_warned ] && echo "You do not have fzf installed, you should fix that!" && touch $HOME/.cache/miversen_zsh_warned
    return 0
  fi

  # Use ~~ as the trigger sequence instead of the default **
  export FZF_COMPLETION_TRIGGER='*'

  # Options to fzf command
  export FZF_COMPLETION_OPTS='--layout=reverse --border=rounded --info=inline-right --prompt=" " --marker="綠" --pointer="▶"'
  
  # Use fd (https://github.com/sharkdp/fd) for listing path candidates.
  # - The first argument to the function ($1) is the base path to start traversal
  # - See the source code (completion.{bash,zsh}) for the details.
  _fzf_compgen_path() {
    fd --hidden --follow --exclude ".git" . "$1"
  }

  # Use fd to generate the list for directory completion
  _fzf_compgen_dir() {
    fd --type d --hidden --follow --exclude ".git" . "$1"
  }

  # Advanced customization of fzf options via _fzf_comprun function
  # - The first argument to the function is the name of the command.
  # - You should make sure to pass the rest of the arguments to fzf.
  _fzf_comprun() {
    local command=$1
    shift

    _tree="tree -C"
    _tree_head="tree -C | head -200"
    if [ $(command -v eza) ]; then
      _tree="eza --color=always --icons=always --tree"
      _tree_head="${_tree} -L 1"
    fi
    case "$command" in
      cd)           fzf --preview "${_tree} {} | head -200"   "$@" ;;
      export|unset) fzf --preview "eval 'echo \$'{}"         "$@" ;;
      ssh)          fzf --preview 'dig {}'                   "$@" ;;
      *)            fzf --preview "[ -d {} ] && ${_tree_head} {} || bat {}" "$@" ;;
    esac
  }
}

install
setup_base
unset setup_base
setup_fzf
unset setup_fzf
lazy_handle_node
unset lazy_handle_node

function reload(){
  reset
  if [ -n "${SHELL_RC+set}" ]; then
    echo "Reloading ${SHELL_RC}"
    source $SHELL_RC
  fi
}

######## Aliases/exports
[ ! -z ${TERM+x} ] && export TERM="xterm-256color"
export PATH
export SCREENDIR
export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8
export whatsmyip
export EDITOR
export VIMRC

# =============================== Keep at bottom of file

source $ZSH/oh-my-zsh.sh
# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# Aliases
[ $(command -v bat) ] && alias cat="bat"
if [ $(command -v eza) ]; then
  alias ls="eza --color=always --icons=always"
  alias lst="ls --tree --level 2"
fi
alias lsa="ls -la"
alias less="less -r"
alias zshconf="${EDITOR} ~/.zshrc && reload"
alias nvimconf="${EDITOR} ~/.config/nvim"

# =============================== Keep at bottom of file
