#!/bin/zsh

# You can set the DEBUG_ZSH flag (to anything) to see debug output during setup of ZSHRC
# DEBUG_ZSH=1

# You can set SKIP_CUSTOM flag (to anything) to bypass any custom changes made to the zshrc profile
# SKIP_CUSTOM=1

function error(){
  echo -e "\033[1;31m$@\033[0m"
}

function debug(){
  [ -z ${DEBUG_ZSH+x} ] && return 0
  echo -e "\033[0;30m$@\033[0m"
}

RC_PATH=$(readlink -f "${(%):-%x}")
export SHELL_RC="${RC_PATH}"
RC_DIR=$(dirname $(readlink -f $RC_PATH))
## User added junk
AUTO_DIR="${RC_DIR}/auto"
export SCREENDIR=$HOME/.cache/screen

export XDG_CONFIG_HOME="${HOME}/.config"
export XDG_CACHE_HOME="${HOME}/.cache"
export ZSH_CUSTOM="${HOME}/.local/share/zsh"
export PROGRAMS="${HOME}/.local/programs"
debug "Creating basic directories"
mkdir -p "${XDG_CONFIG_HOME}" "${XDG_CACHE_HOME}" ~/.local/{programs,appimages,bin}


if [ ! -z ${PREVIOUS_PATH+x} ]; then
  # Resetting the PATH variable to whatever it was before we manipulated it below
  debug "Restoring path to what it was before"
  # Is there a better way to "reload"?
  PATH=$PREVIOUS_PATH
fi

debug "Backing up Path variable to \$PREVIOUS_PATH"
export PREVIOUS_PATH=${PREVIOUS_PATH-${PATH}}

debug "Setting up Oh My ZSH"
export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="powerlevel10k/powerlevel10k"

function install(){
  if [ ! $(command -v curl) ]; then
    error "Missing curl! Please install curl"
    return
  fi
  if [ ! $(command -v git) ]; then
    error "Missing git! Please install git"
    return
  fi

  cur_date=$(date +%Y%m%d-%H%M%S)
  if [ -f $RC_PATH ]; then
    debug "Checking if zshrc is linked correctly"
    if [ ! -f ~/.zshrc ]; then
      debug "No zshrc found, setting ${RC_PATH} as zshrc"
      rm -f ~/.zshrc
      ln -s $RC_PATH ~/.zshrc
    elif [ "$(tail -n1 ~/.zshrc)" != "# miversen33 zshrc" ]; then
      old_zshrc_name=~/.zshrc-old-$cur_date
      debug "Moving old zshrc file to ${old_zshrc_name}"
      mv ~/.zshrc "${old_zshrc_name}"
      ln -s $RC_PATH ~/.zshrc
    fi
  fi
  if [ -f $RC_DIR/p10k.zsh ] && [ ! -z ${USE_OMZSH+x} ]; then
    debug "Checking if p10k is linked correctly"
    if [ ! -f ~/.p10k.zsh ]; then
      debug "No p10k.zsh found."
      ln -s $RC_DIR/p10k.zsh ~/.p10k.zsh
    elif [ "$(tail -n1 ~/.p10k.zsh)" != "# miversen33 p10kzsh" ]; then
      old_p10kzsh=~/.p10k.zsh-old-$cur_date
      debug "Moving old p10k.zsh file to ${old_p10kzsh}"
      mv ~/.p10k.zsh "${old_p10kzsh}"
      ln -s $RC_DIR/p10k.zsh ~/.p10k.zsh
    fi
  fi


  plugins+=("git")
  if [ ! -d "${HOME}/.oh-my-zsh" ]; then
    echo "Installing oh my zsh"
    sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
    rm ~/.zshrc
    ln -s $RC_PATH ~/.zshrc
  fi
  if [ ! -f $HOME/.p10k.zsh ]; then
    curl -fsSL -o $HOME/.p10k.zsh https://raw.githubusercontent.com/miversen33/miversen-dotfiles/master/shells/p10k.zsh
  fi
  if [ ! -d ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k ]; then
    git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k
  fi
  if [ ! -f ~/.local/bin/fzf ]; then
    readonly fzf_version="0.61.0"
    debug "Installing fzf"
    curl -fsL "https://github.com/junegunn/fzf/releases/download/v${fzf_version}/fzf-${fzf_version}-linux_amd64.tar.gz" | tar -C ~/.local/bin -xz
    chmod +x ~/.local/bin/fzf
  fi
  if [ ! -f ~/.local/bin/nvim ]; then
    debug "Installing neovim"
    curl -fsL "https://github.com/neovim/neovim/releases/latest/download/nvim-linux-x86_64.tar.gz" | tar -C ~/.local/programs -xz
    ln -s ~/.local/programs/nvim-linux-x86_64/bin/nvim ~/.local/bin/nvim
  fi
  if [ ! -f ~/.local/bin/direnv ]; then
    plugins+=("direnv")
    readonly direnv_version="v2.36.0"
    debug "Installing direnv version: ${direnv_version}"
    curl -fsL -o $HOME/.local/bin/direnv "https://github.com/direnv/direnv/releases/download/${direnv_version}/direnv.linux-amd64"
    chmod +x ~/.local/bin/direnv
  fi
  if [ ! -f ~/.local/bin/yazi ]; then
    readonly yazi_version="v25.5.31"
    debug "Installing yazi version: ${yazi_version}"
    tmp_dir="/tmp/.miversen-dotfiles-$(date +%Y%m%d%H%M%S)"
    mkdir -p "${tmp_dir}"
    pushd "${tmp_dir}" >/dev/null 2>&1
    curl -fsL -o "${tmp_dir}/yazi.zip" "https://github.com/sxyazi/yazi/releases/download/${yazi_version}/yazi-x86_64-unknown-linux-gnu.zip"
    unzip -qq "${tmp_dir}/yazi.zip" >/dev/null 2>&1
    mv ${tmp_dir}/yazi-*/ya "${HOME}/.local/bin/ya"
    mv ${tmp_dir}/yazi-*/yazi "${HOME}/.local/bin/yazi"
    chmod +x "${HOME}/.local/bin/yazi"
    popd >/dev/null 2>&1
    rm -rf "${tmp_dir}"
  fi
  if [ ! -f "${XDG_CONFIG_HOME}/direnv/config.toml" ]; then
    debug "Installing direnv config"
    mkdir -p "${XDG_CONFIG_HOME}/direnv"
    ln -s "${RC_DIR}/direnv.toml" "${XDG_CONFIG_HOME}/direnv/config.toml"
  fi
  if [ ! -d ~/.config/nvim ]; then
    debug "Installing neovim config"
    ln -s $RC_DIR/../editors/nvim ~/.config/nvim
  fi
  if [ ! -f "${HOME}/.tmux.conf" ]; then
      debug "Adding tmux configuration"
      ln -s "${RC_DIR}/tmux/tmux.conf" "${HOME}/.tmux.conf"
  fi
  # Maybe some day
  # if [ ! -f ~/.local/bin/zellij ]; then
  #   readonly zellij_version="v0.42.2"
  #   debug "Installing zellij version: ${zellij_version}"
  #   curl -fsL "https://github.com/zellij-org/zellij/releases/download/${zellij_version}/zellij-x86_64-unknown-linux-musl.tar.gz" | tar -C ~/.local/bin -xz
  #   chmod +x ~/.local/bin/zellij
  #   $(zellij setup --generate-completion zsh)
  # fi


  # Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
  # Initialization code that may require console input (password prompts, [y/n]
  # confirmations, etc.) must go above this block; everything else may go below.
  if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]] && [ ! -z ${USE_OMZSH+x} ]; then
    source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
  fi
}

function setup_base(){
  debug "Sourcing home .env file"
  [ -f ~/.env ] && source ~/.env
  debug "Setting up base for zsh profile"
  debug "Disabling glob match"
  setopt no_nomatch
  HISTFILE=~/.zsh_history
  HISTSIZE=10000
  SAVEHIST=10000
  setopt INC_APPEND_HISTORY_TIME
  setopt HIST_EXPIRE_DUPS_FIRST
  setopt HIST_IGNORE_DUPS
  setopt HIST_IGNORE_ALL_DUPS
  setopt HIST_IGNORE_SPACE
  setopt HIST_FIND_NO_DUPS
  setopt HIST_SAVE_NO_DUPS
  bindkey -v # Enable vi-mode
  bindkey "^[[1;5C" forward-word
  bindkey "^[[1;5D" backward-word
  zstyle ':completion:::::default' menu yes select
  [ -f /etc/profile ] && source /etc/profile
  [ ! -d $SCREENDIR ] && mkdir -p $SCREENDIR
  [ -d "${HOME}/.luarocks" ] && PATH="${PATH}:${HOME}/.luarocks/bin"
  # This should grab _any_ directory that is under ${PROGRAMS}/*/current
  [ -d "${PROGRAMS}/neovim/current" ] && PATH="${PROGRAMS}/neovim/current/bin:$PATH"
  [ -d "${PROGRAMS}/node/current" ] && PATH="${PROGRAMS}/node/current/bin:$PATH"
  [ -d "${HOME}/.local/bin" ] && PATH="${HOME}/.local/bin:$PATH"
  [ -d "${HOME}/.local/appimages" ] && PATH="${HOME}/.local/appimages:${PATH}"
  [ -d "${HOME}/.cargo/bin" ] && PATH="${HOME}/.cargo/bin:$PATH"
  [ -d "${PROGRAMS}/go/bin" ] && PATH="${PROGRAMS}/go/bin:$PATH"
  [ -d "${HOME}/.local/share/nvim/mason/bin" ] && PATH="${HOME}/.local/share/nvim/mason/bin:$PATH" # Adding mason modules to path

  autoload -Uz compinit && compinit
  # if [ -d "${AUTO_DIR}" ]; then
  #   for auto in $(ls $AUTO_DIR/*.zsh $AUTO_DIR/*.sh); do
  #     debug "Executing auto complete zsh script: ${auto}"
  #     . "${auto}"
  #   done
  # fi

  if [ -d /snap/ ]; then
    for dir in /snap/*; do
      [ -d "${dir}" ] && PATH="${dir}:$PATH"
      [ -d "${dir}/current" ] && PATH="${dir}/current:$PATH"
    done
  fi
  if [ -d /opt/ ]; then
    for dir in /opt/*; do
      [ -d "${dir}/bin" ] && PATH="$PATH:${dir}/bin"
      [ -d "${dir}/current/bin" ] && PATH="$PATH:${dir}/current/bin"
    done
  fi

  unalias vim 2>/dev/null
  [ $HOME/.vimrc ] && VIMRC=$HOME/.vimrc || VIMRC=/etc/vimrc
  if [ $(command -v nvim) ]; then
    debug "Found neovim in path, setting default editor to neovim"
    EDITOR="nvim"
    alias vim="nvim"
    alias NVIMRC="${EDITOR} ~/.config/nvim"
    [ -f $HOME/.config/nvim/init.lua ] && VIMRC=$HOME/.config/nvim/init.lua
    alias nvim_repro="pushd /tmp 2>&1 1>/dev/null; nvim --clean -u ~/.dotfiles/editors/nvim/repro.lua; popd 2>&1 1>/dev/null"

    export function debug_nvim() {
      if [ -n "${DEBUG_NEOVIM_CONFIG+set}" ]; then
        echo "Disabling Debug Neovim Flag"
        unset DEBUG_NEOVIM_CONFIG
      else
        echo "Setting Debug Neovim Flag"
        export DEBUG_NEOVIM_CONFIG=1
      fi
    }
  fi
  if [ $(command -v rsync ) ]; then
    # alias rsync to cp with pretty stuff
    alias 'cp'='rsync -ravh --info=progress2 --stats --no-i-r'
  fi

  if [ -d ~/node_modules ]; then
    # Add stupid node modules to path
    [ -d ~/node_modules/live-server ] && alias "live-server"="~/node_modules/live-server/live-server.js"
  fi
  if [ ! -z ${VIRTUAL_ENV+x} ]; then
    debug "Sourcing selected python virtual environment"
    source "${VIRTUAL_ENV}/bin/activate"
  fi
  debug "Disabling nomatch"
  setopt nomatch

  # alias paru-clean="paru -Sccd"
}

##### Fzf goodies
function setup_fzf(){
  debug "Setting up fzf"
  if [ ! $(command -v fzf) ]; then
    debug "No fzf found!"
    return 0
  fi
  debug "Adding fzf to plugins"
  plugins+=('fzf')
  # Use ~~ as the trigger sequence instead of the default **
  export FZF_COMPLETION_TRIGGER='*'

  # Options to fzf command
  export FZF_COMPLETION_OPTS='--layout=reverse --border=rounded --info=inline-right --prompt=" " --marker="綠" --pointer="▶"'

  # Use fd (https://github.com/sharkdp/fd) for listing path candidates.
  # - The first argument to the function ($1) is the base path to start traversal
  # - See the source code (completion.{bash,zsh}) for the details.
  _fzf_compgen_path() {
    if [ $(command -v fd) ]; then
      fd --hidden --follow --exclude ".git" . "$1"
    else
      find -L "$1" -not -path ".git" 2>/dev/null
    fi
  }

  # Use fd to generate the list for directory completion
  _fzf_compgen_dir() {
    if [ $(command -v fd) ]; then
      fd --type d --hidden --follow --exclude ".git" . "$1"
    else
      find -L "$1" -not -path ".git" 2>dev/dev/null
    fi
  }

  # Advanced customization of fzf options via _fzf_comprun function
  # - The first argument to the function is the name of the command.
  # - You should make sure to pass the rest of the arguments to fzf.
  _fzf_comprun() {
    local command=$1
    shift

    _tree="tree -C"
    _tree_head="tree -C | head -200"
    if [ $(command -v eza) ]; then
      _tree="eza --color=always --icons=always --tree"
      _tree_head="${_tree} -L 1"
    fi
    case "$command" in
      cd)           fzf --preview "${_tree} {} | head -200"   "$@" ;;
      export|unset) fzf --preview "eval 'echo \$'{}"         "$@" ;;
      ssh)          fzf --preview 'dig {}'                   "$@" ;;
      *)            fzf --preview "[ -d {} ] && ${_tree_head} {} || cat {}" "$@" ;;
    esac
  }
}

##### Adding nvm handling
export NVM_DIR="${HOME}/.nvm"
function lazy_setup_node(){
  debug "Setting up nvm lazy handling"
  # This nastiness is thanks to https://github.com/nvm-sh/nvm/issues/1277#issuecomment-1165225621
  # Really cool bogdanu, thanks for making node less shitty
  function init_nvm(){
    debug "Removing lazy alias for ${1}"
    nvm_dir="${NVM_DIR}"
    [ ! -d $nvm_dir ] && [ -d /usr/share/nvm ] && nvm_dir=/usr/share/nvm
    [ -f "${nvm_dir}/nvm.sh" ] && source "${nvm_dir}/nvm.sh"
    [ -f "${nvm_dir}/bash_completion" ] && source "${nvm_dir}/bash_completion"
    [ -f "${nvm_dir}/install-nvm-exec" ] && source "${nvm_dir}/install-nvm-exec"
  }
lazy_aliases=(node npm npx yarn corepack)
for a in "${lazy_aliases[@]}"; do
  alias "${a}"="command -v node || { init-nvm ${a} && unalias $*; } && $a \"\$@\""
done
if [ -f /usr/share/nvm/init-nvm.sh ]; then
  debug "Sourcing init-nvm"
  source /usr/share/nvm/init-nvm.sh
fi
}

function whatsmyip(){
  dig @resolver4.opendns.com myip.opendns.com +short
}

function reload(){
  debug "Attempting to reload zshrc"
  if [ -n "${SHELL_RC+set}" ]; then
    debug "Reloading ${SHELL_RC}"
    source $SHELL_RC
  fi
}

function tmux_rejoin(){
  tmux -2 a -t default || tmux -2 new -s default
}

# Function to reset cursor to beam
function reset_cursor() {
    printf '\033[6 q'  # Set cursor to beam/bar
}

# Reset cursor on shell startup
reset_cursor

# Reset cursor before each prompt (if needed)
precmd() {
    reset_cursor
}

# Trap to reset cursor on shell exit
trap reset_cursor EXIT

if [ -z ${SKIP_CUSTOM+x} ]; then
  debug "Setting up base for zsh"
  install
  setup_base
  setup_fzf
  lazy_setup_node
  unset install
  unset setup_base
  unset setup_fzf
  unset lazy_setup_node

  plugins+=("zsh-syntax-highlighting")
  plugins+=("zsh-autosuggestions")
  [ $(command -v svn) ] && plugins+=("svn")
  if command -v docker > /dev/null 2>&1; then
    plugins+=("docker")
    plugins+=("docker-compose")
    alias "dcw"="docker compose up --abort-on-container-failure --watch"
    alias "dcl"="docker compose logs --follow --timestamps --tail "0
    alias "dcu"="docker compose up"
    alias "dcb"="docker compose build"
    alias "dcd"="docker compose down"
    alias "ds"="docker container start -a "
  fi
  # plugins+=("dotenv")
  [ $(command -v rustc) ] && plugins+=("rust")
  [ $(command -v virtualenv) ] && plugins+=("virtualenv")
fi

[ -f $ZSH/oh-my-zsh.sh ] && source $ZSH/oh-my-zsh.sh
# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

if [ -z ${SKIP_CUSTOM+x} ]; then
  debug "Setting up aliases and exports"
  ######## Aliases/exports
  export PATH
  export SCREENDIR
  export LANG=en_US.UTF-8
  export LC_ALL=en_US.UTF-8
  export EDITOR
  export VIMRC
  export BAT_THEME="OneHalfDark"

  export whatsmyip

  [ $(command -v bat) ] && alias cat="bat" && debug "Found bat, setting alias of cat to bat"
  if [ $(command -v eza) ]; then
    debug "Found eza, setting alias of ls to eza"
    alias ls="eza --color=always --icons=always"
    alias lst="ls --tree --level 2"
  fi
  alias lsa="ls -lah"
  alias less="less -r"
  alias ZSHRC="${EDITOR} ~/.zshrc && reload"
fi

# miversen33 zshrc
