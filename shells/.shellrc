#!/bin/bash
# miversen33 shellrc. This can be used in place of either a ~/.zshrc or ~/.bashrc as it is shell agnostic. To use, simply link this file in place of the existing .zshrc or .bashrc. Fold in your rc into the relevant "rc" function (zsh_rc or bash_rc) and it will be ran as it was before. Additionally this has a profile_rc function that is run regardless of shell, use this for shell agnostic commands (such as aliasing/environment variable setting, etc) 

#TODO(Mike):
# [ ] Installer
# [ ] Merge existing rc files into this (as a sort of template?)
# [ ] Rewrite this thing

RC_PATH=0
IS_RUNNING_INITD=$(command -v service)
IS_RUNNING_SYSTEMD=$(command -v systemctl)
check_rc_update(){
  # This doesn't catch the fact that the rc may be completely diverged from the head. We need to account for that
  REPO_DIRECTORY="$(dirname $RC_PATH)/../"
  SHELLRC_UPDATE_FILE="/tmp/shellrc-update"
  
  [[ -f "$SHELLRC_UPDATE_FILE" && $(($(date +%s) - $(date +%s -r "$SHELLRC_UPDATE_FILE"))) -lt 86400 ]] && return
  
  git -C $REPO_DIRECTORY fetch
  if [ $(git -C $REPO_DIRECTORY rev-list HEAD...origin/master --count $SCRIPT_PATH) ] && [[ ! -f "$SHELLRC_UPDATE_FILE" || $(($(date +%s) - $(date +%s -r "$SHELLRC_UPDATE_FILE"))) -gt 86400 ]]; then
      printf "Shell RC is out of date. Update? [Y/N] "
      read do_update
      do_update="$(echo $do_update | tr '[:lower:]' '[:upper:]')"
      if [ "$do_update" = "Y" ] || [ "$do_update" = "YES" ]; then
        git -C $REPO_DIRECTORY pull $1
        rm -f "$SHELLRC_UPDATE_FILE"
        cleanup
        touch "$SHELLRC_UPDATE_FILE"
        source $RC_PATH
        [ $? ] && exit
      else
        echo "Ignoring Update for 24 hours"
        touch "$SHELLRC_UPDATE_FILE"
      fi;
  fi
}

pre_profile_rc() {
  [ ! -n "${TERM+set}" ] && export TERM="xterm-256color";
  export LANG=en_US.UTF-8
  export LC_ALL=en_US.UTF-8

  export SCREENDIR=$HOME/.cache/screen
  export whatsmyip() {
    local_ip=$(dig @resolver4.opendns.com myip.opendns.com +short)
    echo $local_ip
  }
  if ! [ -d $SCREENDIR ]; then
    mkdir -p $SCREENDIR
  fi
  
  [ -f /etc/profile ] && source /etc/profile
  # User configuration

  # export MANPATH="/usr/local/man:$MANPATH"

  # Compilation flags
  # export ARCHFLAGS="-arch x86_64"

  # ssh
  # export SSH_KEY_PATH="~/.ssh/rsa_id"

  # Set personal aliases, overriding those provided by oh-my-zsh libs,
  # plugins, and themes. Aliases can be placed here, though oh-my-zsh
  # users are encouraged to define aliases within the ZSH_CUSTOM folder.
  # For a full list of active aliases, run `alias`.
  #
  # Example aliases
  # alias zshconfig="mate ~/.zshrc"
  # alias ohmyzsh="mate ~/.oh-my-zsh"

  #source /etc/profile.d/apps-bin-path.sh

  # These are adding duplicates to path for each time its ran. Das no good....
  setopt +o nomatch
  for dir in /opt/*/bin; do
    [ -d "$dir" ] && [[ "$PATH" != *"$dir"* ]] && PATH="${PATH:+$PATH:}$dir"
  done

  for dir in /opt/*/current/bin; do
    [ -d "$dir" ] && [[ "$PATH" != *"$dir"* ]] && PATH="${PATH:+$PATH:}$dir"
  done

  if [ -d "/snap/" ]; then
    for dir in /snap/*; do
      [ -d "$dir" ] && [[ "$PATH" != *"$dir"* ]] && PATH="${PATH:+$PATH:}$dir"
    done
    for dir in /snap/*/current; do
      [ -d "$dir" ] && [[ "$PATH" != *"$dir"* ]] && PATH="${PATH:+$PATH:}$dir"
    done
  fi
  
  # if [ -d "$HOME/*/bin" ]; then
  # for dir in $HOME/*/bin; do
  #   [ -d "$dir" ] && PATH="${PATH:+$PATH:}$dir"
  # done

  for dir in $HOME/.local/*/bin; do
    [ -d "$dir" ] && [[ "$PATH" != *"$dir"* ]] && PATH="${PATH:+$PATH:}$dir"
  done
  # fi

  [ -d "$HOME/.local/bin" ] && [[ "$PATH" != *"$HOME/.local/bin"* ]] && PATH="$PATH:$HOME/.local/bin"
  [ -d "$HOME/.cargo/bin" ] && [[ "$PATH" != *"$HOME/.cargo/bin"* ]] && PATH="$PATH:$HOME/.cargo/bin"
  if [ -d "$HOME/perl5" ]; then #The perl shits
    export PATH="$PATH:$HOME/perl5/bin"; # Adds perl5 (perlbrew) to path if it exists
    export PERL5LIB="$HOME/perl5/lib/perl5${PERL5LIB:+:${PERL5LIB}}";
    export PERL_LOCAL_LIB_ROOT="$HOME/perl5${PERL_LOCAL_LIB_ROOT:+:${PERL_LOCAL_LIB_ROOT}}";
    export PERL_MB_OPT="--install_base \"$HOME/perl5\"";
    export PERL_MM_OPT="INSTALL_BASE=$HOME/perl5";
    [ -f $HOME/perl5/perlbrew/etc/bashrc ] && \. $HOME/perl5/perlbrew/etc/bashrc # Executes perlbrew bashrc if it exists because ¯\_(ツ)_/¯
  fi
  if [ -d "$HOME/.nvm" ]; then  # nvm shit
    export NVM_DIR="$HOME/.nvm"

    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
    [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
  fi
  if [ -d "/opt/nodejs" ]; then #Handle Node shit
    export NODE_PARENT=/opt/nodejs/current
    export PATH=${NODE_PARENT}/bin:${PATH}
    export NODE_PATH=${NODE_PARENT}/lib/node_modules
  fi
  if [ -d "$HOME/.luarocks" ] && [[ "$PATH" != *"$HOME/.luarocks"* ]]; then #Add luarocks because god hates me
    export PATH=$PATH:"$HOME/.luarocks/bin"
  fi
    
  if [ -x "$(command -v nvim)" ]; then
    export EDITOR="nvim"
    alias vim="nvim" # Sets nvim as alias to vim
    export VIMRC="$HOME/.config/nvim/init.lua"
  else;
    export EDITOR="vim"
    unalias vim 2>/dev/null
    export VIMRC="$HOME/.vimrc"
  fi;

  [ ! -n "${USER+set}" ] && export USER=`whoami`;
  [ ! -n "${SHELL+set}" ] && export SHELL=`grep $USER /etc/passwd | cut -d \: -f 7`;
  if [ -x "$(command -v tmux)" ] && [ ! -n "${NOTMUX+set}" ] && [ ! -n "${MYVIMRC+set}" ] && [ ! -n "${TMUX+set}" ] && [ "${TERM_PROGRAM}" != "vscode" ] && [ ! -f $HOME/.notmux ] && [[ ! -n "${SSH_CLIENT+set}" ||  -f $HOME/.isproxy ]]; then
      tmux -2 a -t default || tmux -2 new -s default;
      exit 0
  fi
}

post_profile_rc(){
  true
}

zsh_rc () {
  export SHELL_RC="$HOME/.zshrc"
  RC_PATH=$(readlink -f "${(%):-%x}")
  cur_dir=$(dirname `readlink -f $RC_PATH`)
  autoload -Uz compinit && compinit
  for auto in `ls $cur_dir/auto/*.zsh`; do
    . $auto
  done
  # Oh my zsh stuff
  if [ -f "$HOME/.oh-my-zsh/oh-my-zsh.sh" ]; then
      export ZSH="$HOME/.oh-my-zsh"
      if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
         source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
      fi
      # Set name of the theme to load. Optionally, if you set this to "random"
      # it'll load a random theme each time that oh-my-zsh is loaded.
      # See https://github.com/robbyrussell/oh-my-zsh/wiki/Themes
      ZSH_THEME="powerlevel10k/powerlevel10k"
      # ZSH_THEME="random"

      # reloads zsh after new program is installed

      # Set list of themes to load
      zstyle ':completion:*' rehash true
      # Setting this variable when ZSH_THEME=random
      # cause zsh load theme from this variable instead of
      # looking in ~/.oh-my-zsh/themes/
      # An empty array have no effect
      # ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

      # Uncomment the following line to use case-sensitive completion.
      # CASE_SENSITIVE="true"

      # Uncomment the following line to use hyphen-insensitive completion. Case
      # sensitive completion must be off. _ and - will be interchangeable.
      # HYPHEN_INSENSITIVE="true"

      # Uncomment the following line to disable bi-weekly auto-update checks.
      # DISABLE_AUTO_UPDATE="true"

      # Uncomment the following line to change how often to auto-update (in days).
      # export UPDATE_ZSH_DAYS=13

      # Uncomment the following line to disable colors in ls.
      # DISABLE_LS_COLORS="true"

      # Uncomment the following line to disable auto-setting terminal title.
      # DISABLE_AUTO_TITLE="true"

      # Uncomment the following line to enable command auto-correction.
      # ENABLE_CORRECTION="true"

      # Uncomment the following line to display red dots whilst waiting for completion.
      # COMPLETION_WAITING_DOTS="true"

      # Uncomment the following line if you want to disable marking untracked files
      # under VCS as dirty. This makes repository status check for large repositories
      # much, much faster.
      # DISABLE_UNTRACKED_FILES_DIRTY="true"

      # Uncomment the following line if you want to change the command execution time
      # stamp shown in the history command output.
      # The optional three formats: "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
      # HIST_STAMPS="mm/dd/yyyy"

      # Would you like to use another custom folder than $ZSH/custom?
      # ZSH_CUSTOM=/path/to/new-custom-folder

      # Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
      # Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
      # Example format: plugins=(rails git textmate ruby lighthouse)
      # Add wisely, as too many plugins slow down shell startup.
      plugins=(
          git docker
      )
      source $ZSH/oh-my-zsh.sh
  fi

  # To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
  [[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh
}

bash_rc () {
  export SHELL_RC="$HOME/.bashrc"
  RC_PATH=$(readlink -f "$BASH_SOURCE")
  cur_dir=$(dirname `readlink -f $RC_PATH`)
  for auto in `ls $cur_dir/auto/*.bash`; do
    . $auto
  done
  # Path to your oh-my-bash installation.
  if [ -f $HOME/.oh-my-bash ]; then
    export OSH=$HOME/.oh-my-bash

    # Set name of the theme to load. Optionally, if you set this to "random"
    # it'll load a random theme each time that oh-my-bash is loaded.
    OSH_THEME="font"

    # Uncomment the following line to use case-sensitive completion.
    # CASE_SENSITIVE="true"

    # Uncomment the following line to use hyphen-insensitive completion. Case
    # sensitive completion must be off. _ and - will be interchangeable.
    # HYPHEN_INSENSITIVE="true"

    # Uncomment the following line to disable bi-weekly auto-update checks.
    # DISABLE_AUTO_UPDATE="true"

    # Uncomment the following line to change how often to auto-update (in days).
    # export UPDATE_OSH_DAYS=13

    # Uncomment the following line to disable colors in ls.
    # DISABLE_LS_COLORS="true"

    # Uncomment the following line to disable auto-setting terminal title.
    # DISABLE_AUTO_TITLE="true"

    # Uncomment the following line to enable command auto-correction.
    # ENABLE_CORRECTION="true"

    # Uncomment the following line to display red dots whilst waiting for completion.
    # COMPLETION_WAITING_DOTS="true"

    # Uncomment the following line if you want to disable marking untracked files
    # under VCS as dirty. This makes repository status check for large repositories
    # much, much faster.
    # DISABLE_UNTRACKED_FILES_DIRTY="true"

    # Uncomment the following line if you want to change the command execution time
    # stamp shown in the history command output.
    # The optional three formats: "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
    # HIST_STAMPS="mm/dd/yyyy"

    # Would you like to use another custom folder than $OSH/custom?
    # OSH_CUSTOM=/path/to/new-custom-folder

    # Which completions would you like to load? (completions can be found in ~/.oh-my-bash/completions/*)
    # Custom completions may be added to ~/.oh-my-bash/custom/completions/
    # Example format: completions=(ssh git bundler gem pip pip3)
    # Add wisely, as too many completions slow down shell startup.
    completions=(
      git
      composer
      ssh
    )

    # Which aliases would you like to load? (aliases can be found in ~/.oh-my-bash/aliases/*)
    # Custom aliases may be added to ~/.oh-my-bash/custom/aliases/
    # Example format: aliases=(vagrant composer git-avh)
    # Add wisely, as too many aliases slow down shell startup.
    aliases=(
      general
    )

    # Which plugins would you like to load? (plugins can be found in ~/.oh-my-bash/plugins/*)
    # Custom plugins may be added to ~/.oh-my-bash/custom/plugins/
    # Example format: plugins=(rails git textmate ruby lighthouse)
    # Add wisely, as too many plugins slow down shell startup.
    plugins=(
      git
      bashmarks
    )

    source $OSH/oh-my-bash.sh
  fi
}

dev_env(){
  if [ ! -z $DEV_ENV ]; then
    echo "You are already in a dev environment ya square!"
    return 0;
  fi
  mount_opt=$1
  port_opt=$2
  if [ ! -z "$1" ] && [ "$1" =~ ",|:" ]; then
    # There is no mount point provided, and just ports. Why? Idk but whatever
    port_opt=$1
    unset mount_opt
  fi
  if [ ! `docker image ls --filter 'reference=miversen33/dev_env' --format '{{.Repository}}'` ]; then
    # There is no image available for the development environment. Ask if they want us to create it
    echo -n "dev_env image not found. Would you like me to create it? [y/N] "
    read do_build
    do_build="$(echo $do_build | tr '[:lower:]' '[:upper:]')"
    if [ "$do_build" != "Y" ] && [ "$do_build" != "YES" ]; then
      return 0;
    fi
    build_url=https://raw.githubusercontent.com/miversen33/miversen-dotfiles/master/docker/Dockerfile
    build_file=$(dirname `readlink -f $RC_PATH`)/../docker/Dockerfile
    build_link=$build_url
    [ -f $build_file ] && build_link=$build_file
    docker build -t miversen33/dev_env:latest $build_link
  fi
  port_arg=""
  if [ ! -z ${port_opt} ]; then
    # Check to see if port_opt is a list of ports or a range
    [ $port_opt =~ ":" ] && port_arg="--expose $port_opt"
    [ $port_opt =~ "," ] && port_arg=`echo $port_opt | sed --expression 's/\([0-9]\+\),\?/--expose \1 /g'`
    port_arg="$port_arg --publish-all=true"
  fi
  mount_arg=""
  if [ ! -z ${mount_opt} ]; then
    _source=`readlink -f $mount_opt`
    _destination=/workspace
    [ -f $_source ] && _destination=/workspace/`basename $mount_opt`
    mount_arg="--mount type=bind,source=$_source,destination=$_destination"
  fi
  [ ! -z ${port_arg} ] && echo "Exposing $port_opt on container"
  # mount_arg="--mount type=volume,source=dev_env_etc,destination=/etc --mount type=volume,source=dev_env_opt,destination=/opt --mount type=volume,source=dev_env_usr,destination=/usr --mount type=volume,source=dev_env_miversen,destination=/home/miversen $mount_arg"
  cmd="docker run --rm -it $port_arg $mount_arg --entrypoint /bin/zsh miversen33/dev_env:latest"
  echo $cmd
  bash -c $cmd
}

restart_env(){
  echo "Restarting Development Environment..."
  cur_dir=$(dirname `readlink -f $RC_PATH`)
  cd "${cur_dir}/"../docker/
  docker compose stop 2>/dev/null
  docker compose up -d 2>/dev/null
  cd $cur_dir
  echo "Development Environment Restarted."
}

debug_nvim() {
  if [ -n "${DEBUG_NEOVIM_CONFIG+set}" ]; then
    echo "Disabling Debug Neovim Flag"
    unset DEBUG_NEOVIM_CONFIG
  else;
    echo "Setting Debug Neovim Flag"
    export DEBUG_NEOVIM_CONFIG=1
  fi
}

reload() {
  reset
  if [ -n "${SHELL_RC+set}" ]; then
    echo "Reloading ${SHELL_RC}"
    source $SHELL_RC
  fi
}

cleanup() {
  unset SHELLRC_UPDATE_FILE
  unset SCRIPT_PATH

  unset pre_profile_rc
  unset post_profile_rc
  unset zsh_rc
  unset bash_rc
  unset check_rc_update
  unset cleanup
}

pre_profile_rc

if [ -n "${ZSH_VERSION+set}" ]; then
  # We are in a zsh shell
  zsh_rc
fi
if [ -n "${BASH_VERSION+set}" ]; then
  # We are in a bash shell
  bash_rc
fi

post_profile_rc

# check_rc_update
cleanup
