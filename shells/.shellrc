# miversen33 shellrc. This can be used in place of either a ~/.zshrc or ~/.bashrc as it is shell agnostic. To use, simply link this file in place of the existing .zshrc or .bashrc. Fold in your rc into the relevant "rc" function (zsh_rc or bash_rc) and it will be ran as it was before. Additionally this has a profile_rc function that is run regardless of shell, use this for shell agnostic commands (such as aliasing/environment variable setting, etc) 

#TODO(Mike):
# [ ] Installer
# [ ] Merge existing rc files into this (as a sort of template?)

RC_PATH=0
check_rc_update(){
  # This doesn't catch the fact that the rc may be completely diverged from the head. We need to account for that
  REPO_DIRECTORY="$(dirname $RC_PATH)/../"
  SHELLRC_UPDATE_FILE="/tmp/shellrc-update"
  
  [[ -f "$SHELLRC_UPDATE_FILE" && $(($(date +%s) - $(date +%s -r "$SHELLRC_UPDATE_FILE"))) -lt 86400 ]] && return
  
  git -C $REPO_DIRECTORY fetch
  if [ $(git -C $REPO_DIRECTORY rev-list HEAD...origin/master --count $SCRIPT_PATH) ] && [[ ! -f "$SHELLRC_UPDATE_FILE" || $(($(date +%s) - $(date +%s -r "$SHELLRC_UPDATE_FILE"))) -gt 86400 ]]; then
      printf "Shell RC is out of date. Update? [Y/N] "
      read do_update
      do_update="$(echo $do_update | tr '[:lower:]' '[:upper:]')"
      if [ "$do_update" = "Y" ] || [ "$do_update" = "YES" ]; then
        git -C $REPO_DIRECTORY pull $1
        rm -f "$SHELLRC_UPDATE_FILE"
        cleanup
        source $SCRIPT_PATH
        [ $? ] && exit
      else
        echo "Ignoring Update for 24 hours"
        touch "$SHELLRC_UPDATE_FILE"
      fi;
  fi
}

profile_rc() {
  export EDITOR="vim"
  export TERM="xterm-256color"
  export LANG=en_US.UTF-8
  # [ ! -e "$HOME/.shellrc" ] && 
  # User configuration

  # export MANPATH="/usr/local/man:$MANPATH"

  # Compilation flags
  # export ARCHFLAGS="-arch x86_64"

  # ssh
  # export SSH_KEY_PATH="~/.ssh/rsa_id"

  # Set personal aliases, overriding those provided by oh-my-zsh libs,
  # plugins, and themes. Aliases can be placed here, though oh-my-zsh
  # users are encouraged to define aliases within the ZSH_CUSTOM folder.
  # For a full list of active aliases, run `alias`.
  #
  # Example aliases
  # alias zshconfig="mate ~/.zshrc"
  # alias ohmyzsh="mate ~/.oh-my-zsh"

  #source /etc/profile.d/apps-bin-path.sh

  [ -f "/usr/bin/nvim" ] && alias vim="nvim" # Sets nvim as alias to vim
  [ -d "$HOME/.local/bin" ] && export PATH="$PATH:$HOME/.local/bin" # Adds local bin to path
  [ -d "/opt/gradle/current/bin" ] && export PATH="$PATH:/opt/gradle/current/bin" # Adds gradle to path if it exists
  [ -d "/opt/kotlinc/current/bin" ] && export PATH="$PATH:/opt/kotlinc/current/bin" # Adds kotlin compiler to path if it exists
  [ -d "/opt/Unity/current" ] && export PATH="$PATH:/opt/Unity/current" # Adds kotlin compiler to path if it exists
  if [ -d "$HOME/perl5" ]; then #The perl shits
    export PATH="$PATH:$HOME/perl5/bin"; # Adds perl5 (perlbrew) to path if it exists
    export PERL5LIB="$HOME/perl5/lib/perl5${PERL5LIB:+:${PERL5LIB}}";
    export PERL_LOCAL_LIB_ROOT="$HOME/perl5${PERL_LOCAL_LIB_ROOT:+:${PERL_LOCAL_LIB_ROOT}}";
    export PERL_MB_OPT="--install_base \"$HOME/perl5\"";
    export PERL_MM_OPT="INSTALL_BASE=$HOME/perl5";
    \. $HOME/perl5/perlbrew/etc/bashrc # Executes perlbrew bashrc because ¯\_(ツ)_/¯
  fi
  if [ -d "$HOME.nvm" ]; then  # nvm shit
    export NVM_DIR="$HOME/.nvm"
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
    [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
  fi
  if [ -d "/opt/nodejs" ]; then #Handle Node shit
    export NODE_PARENT=/opt/nodejs/current
    export PATH=${NODE_PARENT}/bin:${PATH}
    export NODE_PATH=${NODE_PARENT}/lib/node_modules
  fi
}

zsh_rc () {
  export SHELL_RC="$HOME/.zshrc"
  RC_PATH=$(readlink -f "${(%):-%x}")
  # Oh my zsh stuff
  if [ -f "$HOME/.oh-my-zsh/oh-my-zsh.sh" ]; then
      export ZSH="$HOME/.oh-my-zsh"
      if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
         source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
      fi
      # Set name of the theme to load. Optionally, if you set this to "random"
      # it'll load a random theme each time that oh-my-zsh is loaded.
      # See https://github.com/robbyrussell/oh-my-zsh/wiki/Themes
      ZSH_THEME="powerlevel10k/powerlevel10k"
      # ZSH_THEME="random"

      # reloads zsh after new program is installed

      # Set list of themes to load
      zstyle ':completion:*' rehash true
      # Setting this variable when ZSH_THEME=random
      # cause zsh load theme from this variable instead of
      # looking in ~/.oh-my-zsh/themes/
      # An empty array have no effect
      # ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

      # Uncomment the following line to use case-sensitive completion.
      # CASE_SENSITIVE="true"

      # Uncomment the following line to use hyphen-insensitive completion. Case
      # sensitive completion must be off. _ and - will be interchangeable.
      # HYPHEN_INSENSITIVE="true"

      # Uncomment the following line to disable bi-weekly auto-update checks.
      # DISABLE_AUTO_UPDATE="true"

      # Uncomment the following line to change how often to auto-update (in days).
      # export UPDATE_ZSH_DAYS=13

      # Uncomment the following line to disable colors in ls.
      # DISABLE_LS_COLORS="true"

      # Uncomment the following line to disable auto-setting terminal title.
      # DISABLE_AUTO_TITLE="true"

      # Uncomment the following line to enable command auto-correction.
      # ENABLE_CORRECTION="true"

      # Uncomment the following line to display red dots whilst waiting for completion.
      # COMPLETION_WAITING_DOTS="true"

      # Uncomment the following line if you want to disable marking untracked files
      # under VCS as dirty. This makes repository status check for large repositories
      # much, much faster.
      # DISABLE_UNTRACKED_FILES_DIRTY="true"

      # Uncomment the following line if you want to change the command execution time
      # stamp shown in the history command output.
      # The optional three formats: "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
      # HIST_STAMPS="mm/dd/yyyy"

      # Would you like to use another custom folder than $ZSH/custom?
      # ZSH_CUSTOM=/path/to/new-custom-folder

      # Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
      # Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
      # Example format: plugins=(rails git textmate ruby lighthouse)
      # Add wisely, as too many plugins slow down shell startup.
      plugins=(
          git docker
      )

      autoload -U compinit && compinit
      source $ZSH/oh-my-zsh.sh
  fi

  # To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
  [[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh
}

bash_rc () {
  export SHELL_RC="$HOME/.bashrc"
  RC_PATH=$(readlink -f "$BASH_SOURCE")
  # Path to your oh-my-bash installation.
  if [ -f $HOME/.oh-my-bash ]; then
    export OSH=$HOME/.oh-my-bash

    # Set name of the theme to load. Optionally, if you set this to "random"
    # it'll load a random theme each time that oh-my-bash is loaded.
    OSH_THEME="font"

    # Uncomment the following line to use case-sensitive completion.
    # CASE_SENSITIVE="true"

    # Uncomment the following line to use hyphen-insensitive completion. Case
    # sensitive completion must be off. _ and - will be interchangeable.
    # HYPHEN_INSENSITIVE="true"

    # Uncomment the following line to disable bi-weekly auto-update checks.
    # DISABLE_AUTO_UPDATE="true"

    # Uncomment the following line to change how often to auto-update (in days).
    # export UPDATE_OSH_DAYS=13

    # Uncomment the following line to disable colors in ls.
    # DISABLE_LS_COLORS="true"

    # Uncomment the following line to disable auto-setting terminal title.
    # DISABLE_AUTO_TITLE="true"

    # Uncomment the following line to enable command auto-correction.
    # ENABLE_CORRECTION="true"

    # Uncomment the following line to display red dots whilst waiting for completion.
    # COMPLETION_WAITING_DOTS="true"

    # Uncomment the following line if you want to disable marking untracked files
    # under VCS as dirty. This makes repository status check for large repositories
    # much, much faster.
    # DISABLE_UNTRACKED_FILES_DIRTY="true"

    # Uncomment the following line if you want to change the command execution time
    # stamp shown in the history command output.
    # The optional three formats: "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
    # HIST_STAMPS="mm/dd/yyyy"

    # Would you like to use another custom folder than $OSH/custom?
    # OSH_CUSTOM=/path/to/new-custom-folder

    # Which completions would you like to load? (completions can be found in ~/.oh-my-bash/completions/*)
    # Custom completions may be added to ~/.oh-my-bash/custom/completions/
    # Example format: completions=(ssh git bundler gem pip pip3)
    # Add wisely, as too many completions slow down shell startup.
    completions=(
      git
      composer
      ssh
    )

    # Which aliases would you like to load? (aliases can be found in ~/.oh-my-bash/aliases/*)
    # Custom aliases may be added to ~/.oh-my-bash/custom/aliases/
    # Example format: aliases=(vagrant composer git-avh)
    # Add wisely, as too many aliases slow down shell startup.
    aliases=(
      general
    )

    # Which plugins would you like to load? (plugins can be found in ~/.oh-my-bash/plugins/*)
    # Custom plugins may be added to ~/.oh-my-bash/custom/plugins/
    # Example format: plugins=(rails git textmate ruby lighthouse)
    # Add wisely, as too many plugins slow down shell startup.
    plugins=(
      git
      bashmarks
    )

    source $OSH/oh-my-bash.sh
  fi
}

reload() {
  if [ -n "${SHELL_RC+set}" ]; then
    echo "Reloading ${SHELL_RC}"
    source $SHELL_RC
  fi
}

cleanup() {
  unset SHELLRC_UPDATE_FILE
  unset SCRIPT_PATH

  unset profile_rc
  unset zsh_rc
  unset bash_rc
  unset check_rc_update
  unset cleanup
}

check_rc_update
profile_rc

if [ -n "${ZSH_VERSION+set}" ]; then
  # We are in a zsh shell
  zsh_rc
fi
if [ -n "${BASH_VERSION+set}" ]; then
  # We are in a bash shell
  bash_rc
fi

cleanup
